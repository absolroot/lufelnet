name: Fetch external JSON every 6h

on:
  schedule:
    - cron: "0 */6 * * *"   # 6시간마다 (UTC)
  workflow_dispatch: {}      # 필요 시 수동 실행

permissions:
  contents: write

concurrency:
  group: fetch-external-json
  cancel-in-progress: false

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch & update JSON files
        env:
          BASE_URL: https://iant.kr:5000/data
        run: |
          set -euo pipefail

          # 저장 루트(정적 서빙용)
          ROOT_DIR="data/external"
          mkdir -p "$ROOT_DIR/gacha" "$ROOT_DIR/guildboss" "$ROOT_DIR/sos"
          mkdir -p "$ROOT_DIR/character" "$ROOT_DIR/weapon"  # character/weapon 저장 루트
          mkdir -p "$ROOT_DIR/before"  # 이전 내용 백업용 디렉토리 추가
          mkdir -p "$ROOT_DIR/before/character" "$ROOT_DIR/before/weapon"

          # 엔드포인트와 리전 정의
          ENDPOINTS=("gacha" "guildboss" "sos")
          REGIONS=("kr" "en" "cn" "tw" "jp" "sea")
          CODENAME_FILE="${ROOT_DIR}/character/codename.json"

          changed=0

          fetch_and_write () {
            local endpoint="$1"
            local region="$2"
            local url="${BASE_URL}/${endpoint}/${region}"
            local out="${ROOT_DIR}/${endpoint}/${region}.json"
            local backup_dir="${ROOT_DIR}/before/${endpoint}"
            local timestamp=$(date +"%Y%m%d_%H%M%S")
            local backup_file="${backup_dir}/${region}_${timestamp}.json"

            echo "➡️  Fetching: ${url}"

            # 가져오고 JSON 유효성/정렬 보장
            tmp_new="$(mktemp)"
            curl -sS "$url" -o "$tmp_new"
            jq . "$tmp_new" > /dev/null  # 유효성 체크
            jq -S . "$tmp_new" > "${tmp_new}.sorted"

            # 기존 파일과 비교해서 변경 있을 때만 갱신
            if [ -f "$out" ]; then
              tmp_old="$(mktemp)"
              jq -S . "$out" > "$tmp_old"
              if diff -q "$tmp_old" "${tmp_new}.sorted" > /dev/null; then
                echo "   No change: ${endpoint}/${region}.json"
              else
                # 이전 버전 백업
                cp "$out" "$backup_file"
                echo "   Backup created: ${backup_file}"

                # 새로운 파일 덮어쓰기
                cp "${tmp_new}.sorted" "$out"
                echo "   Updated: ${endpoint}/${region}.json"
                changed=1
              fi
            else
              # 파일이 없으면 새로운 파일로 저장하고 백업
              cp "${tmp_new}.sorted" "$out"
              echo "   Created: ${endpoint}/${region}.json"
              changed=1
            fi
          }

          fetch_and_write_character () {
            local region="$1"
            local api_codename="$2"
            local local_codename="$3"
            local url="${BASE_URL}/character/${region}/${api_codename}"
            local out="${ROOT_DIR}/character/${region}/${local_codename}.json"
            local backup_dir="${ROOT_DIR}/before/character/${region}"
            local timestamp=$(date +"%Y%m%d_%H%M%S")
            local backup_file="${backup_dir}/${local_codename}_${timestamp}.json"

            echo "➡️  Fetching: ${url}"

            tmp_new="$(mktemp)"
            curl -sS "$url" -o "$tmp_new"
            jq . "$tmp_new" > /dev/null
            jq -S . "$tmp_new" > "${tmp_new}.sorted"

            mkdir -p "$(dirname "$out")"
            mkdir -p "$backup_dir"

            if [ -f "$out" ]; then
              tmp_old="$(mktemp)"
              jq -S . "$out" > "$tmp_old"
              if diff -q "$tmp_old" "${tmp_new}.sorted" > /dev/null; then
                echo "   No change: character/${region}/${local_codename}.json"
              else
                cp "$out" "$backup_file"
                echo "   Backup created: ${backup_file}"
                cp "${tmp_new}.sorted" "$out"
                echo "   Updated: character/${region}/${local_codename}.json"
                changed=1
              fi
            else
              cp "${tmp_new}.sorted" "$out"
              echo "   Created: character/${region}/${local_codename}.json"
              changed=1
            fi
          }

          fetch_and_write_weapon () {
            local region="$1"
            local api_codename="$2"
            local local_codename="$3"
            local url="${BASE_URL}/weapon/${region}/${api_codename}"
            local out="${ROOT_DIR}/weapon/${region}/${local_codename}.json"
            local backup_dir="${ROOT_DIR}/before/weapon/${region}"
            local timestamp=$(date +"%Y%m%d_%H%M%S")
            local backup_file="${backup_dir}/${local_codename}_${timestamp}.json"

            echo "➡️  Fetching: ${url}"

            tmp_new="$(mktemp)"
            curl -sS "$url" -o "$tmp_new"
            jq . "$tmp_new" > /dev/null
            jq -S . "$tmp_new" > "${tmp_new}.sorted"

            mkdir -p "$(dirname "$out")"
            mkdir -p "$backup_dir"

            if [ -f "$out" ]; then
              tmp_old="$(mktemp)"
              jq -S . "$out" > "$tmp_old"
              if diff -q "$tmp_old" "${tmp_new}.sorted" > /dev/null; then
                echo "   No change: weapon/${region}/${local_codename}_weapon.json"
              else
                cp "$out" "$backup_file"
                echo "   Backup created: ${backup_file}"
                cp "${tmp_new}.sorted" "$out"
                echo "   Updated: weapon/${region}/${local_codename}_weapon.json"
                changed=1
              fi
            else
              cp "${tmp_new}.sorted" "$out"
              echo "   Created: weapon/${region}/${local_codename}_weapon.json"
              changed=1
            fi
          }

          for ep in "${ENDPOINTS[@]}"; do
            for rg in "${REGIONS[@]}"; do
              fetch_and_write "$ep" "$rg"
            done
          done

          # character 데이터 수집 (codename 매핑 목록 기반)
          if [ -f "$CODENAME_FILE" ]; then
            echo "➡️  Loading codenames mapping from: $CODENAME_FILE"
            mapfile -t CN_API < <(jq -r '.[].api' "$CODENAME_FILE")
            mapfile -t CN_LOCAL < <(jq -r '.[].local' "$CODENAME_FILE")
            for rg in "${REGIONS[@]}"; do
              mkdir -p "$ROOT_DIR/character/$rg" "$ROOT_DIR/weapon/$rg"
              mkdir -p "$ROOT_DIR/before/character/$rg" "$ROOT_DIR/before/weapon/$rg"
              for i in "${!CN_API[@]}"; do
                api_code="${CN_API[$i]}"
                local_code="${CN_LOCAL[$i]}"
                fetch_and_write_character "$rg" "$api_code" "$local_code"
                fetch_and_write_weapon "$rg" "$api_code" "$local_code"
              done
            done
          else
            echo "⚠️  $CODENAME_FILE not found. Skip character fetch."
          fi

          # 변경이 있으면 커밋
          if [ "$changed" -eq 1 ]; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "chore(data): update /data/external JSONs [skip ci]"
            git push
            echo "✅ Changes committed."
          else
            echo "✅ No changes to commit."
          fi
